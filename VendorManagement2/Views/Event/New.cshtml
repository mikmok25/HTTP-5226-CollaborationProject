@model VendorManagement2.Models.Event

@{
    ViewBag.Title = "Create New Event";
}

<h2 class="my-4">Create New Event</h2>

<form action="/Event/Create" method="POST" class="needs-validation" novalidate>
    <div class="form-horizontal">
        <h4>Event</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group row">
            @Html.LabelFor(model => model.EventName, htmlAttributes: new { @class = "control-label col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.EventDescription, htmlAttributes: new { @class = "control-label col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.EventLocation, htmlAttributes: new { @class = "control-label col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventLocation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventLocation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.EventType, htmlAttributes: new { @class = "control-label col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.EventDate, htmlAttributes: new { @class = "control-label col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.CategoryID, "Category", htmlAttributes: new { @class = "control-label col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CategoryID, (SelectList)ViewBag.CategoryID, "-- Select Category --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>

<div class="mt-3">
    @Html.ActionLink("Back to List", "List", null, new { @class = "btn btn-secondary" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        document.getElementById('eventForm').addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent the form from submitting immediately

            // Gather form data
            const formData = new FormData(this);
            const formEntries = Array.from(formData.entries());

            // Print out the form data in the console
            console.log('Form Data:');
            formEntries.forEach(entry => {
                console.log(`${entry[0]}: ${entry[1]}`);
            });

            // Optionally, you can show the data on the page
            let output = '<h4>Submitted Data</h4><ul>';
            formEntries.forEach(entry => {
                output += `<li><strong>${entry[0]}:</strong> ${entry[1]}</li>`;
            });
            output += '</ul>';
            document.getElementById('formDataOutput').innerHTML = output;

            // Submit the form programmatically after printing the data
            this.submit();
        });
    </script>
}

<div id="formDataOutput"></div>
}
