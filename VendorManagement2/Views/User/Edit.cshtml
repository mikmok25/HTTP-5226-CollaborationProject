@model VendorManagement2.Models.ViewModels.UpdateUser

@{
    ViewBag.Title = "Edit User";
}

<h2 class="my-4">Edit User</h2>

<nav>
    <ul>
        <li><a href="/User/List" class="btn btn-secondary">Go back to list</a></li>
        <li><a href="/User/DeleteConfirm/@Model.SelectedUser.UserID" class="btn btn-danger">Delete</a></li>
    </ul>
</nav>

<form action="/User/Update/@Model.SelectedUser.UserID" method="POST" class="needs-validation" novalidate>
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <input type="hidden" name="Id" value="@Model.SelectedUser.UserID" />

        <div class="form-group row">
            @Html.LabelFor(model => model.SelectedUser.Username, htmlAttributes: new { @class = "control-label col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SelectedUser.Username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SelectedUser.Username, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.SelectedUser.Email, htmlAttributes: new { @class = "control-label col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SelectedUser.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SelectedUser.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-10 offset-md-2">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>

<div class="mt-3">
    @Html.ActionLink("Back to List", "List", null, new { @class = "btn btn-secondary" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                var forms = document.getElementsByClassName('needs-validation');
                Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
}
